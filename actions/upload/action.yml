name: docs-upload-action
description: Upload documentation

inputs:
  build-root:
    default: "./_docs-build"
  github-token:
    required: true
  project-link:
    required: true
  storage-bucket:
    required: true
  storage-endpoint:
    required: true
  storage-access-key-id:
    required: true
  storage-secret-access-key:
    required: true
  storage-region:
    required: true
  stage:
    default: "stable"

runs:
  using: composite
  steps:
    - name: Download inputs
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ inputs.github-token }}
        name: inputs
    - name: Download build artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ inputs.github-token }}
        workflow: ${{ github.event.workflow_run.workflow_id || github.run_id }}
        name: build-output-md
        path: ${{ inputs.build-root }}

    - name: Get revision
      id: get-revision
      run: |
        echo "revision=$(cat ./revision)" >> $GITHUB_OUTPUT
      shell: bash

    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - run: npm i @diplodoc/cli -g
      shell: bash
    - name: Set BUCKET and PREFIX
      shell: bash
      run: |
        if [[ "${{ inputs.storage-bucket }}" =~ "/" ]]; then
          echo "Detected complex bucket name"

          COMPLEX="${{ inputs.storage-bucket }}"
          PARTS=(${COMPLEX//\// })
          PREFIX=${PARTS[@]:1}

          echo "BUCKET=${PARTS[0]}-${{ inputs.stage }}" >> $GITHUB_ENV
          echo "PREFIX=${PREFIX// //}/rev/${{ steps.get-revision.outputs.revision }}" >> $GITHUB_ENV
        else
          echo "BUCKET=${{ inputs.storage-bucket }}-${{ inputs.stage }}" >> $GITHUB_ENV
          echo "PREFIX=rev/${{ steps.get-revision.outputs.revision }}" >> $GITHUB_ENV
        fi
    - name: Upload S3
      shell: bash
      run: |
        yfm publish \
          -i "${{ inputs.build-root }}" \
          --endpoint "${{ inputs.storage-endpoint }}" \
          --region "${{ inputs.storage-region }}" \
          --bucket "${{ env.BUCKET }}" \
          --prefix "${{ env.PREFIX }}" \
          --access-key-id "${{ inputs.storage-access-key-id }}" \
          --secret-access-key "${{ inputs.storage-secret-access-key }}"

    - name: Get Pull Request Number
      id: pr_info
      shell: bash
      if: github.event.workflow_run
      run: |
        workflow_run_id=${{ github.event.workflow_run.id }}
        repo_name=${{ github.repository }}

        PR_NUMBER=$(curl -s -H "Authorization: Bearer ${{ inputs.github-token }}" \
            "https://api.github.com/repos/${repo_name}/actions/runs/${workflow_run_id}" | \
            jq -r '.pull_requests[0].number')

        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

    - name: 'Comment to PR'
      uses: actions/github-script@v6
      if: github.event.workflow_run
      env:
        PROJECT_LINK: "${{ inputs.project-link }}"
        REVISION: "${{ steps.get-revision.outputs.revision }}"
        PR_NUMBER: "${{ steps.pr_info.outputs.pr_number }}"
      with:
        script: |
          const {PROJECT_LINK, REVISION, PR_NUMBER} = process.env;
          github.rest.issues.createComment({
            issue_number: PR_NUMBER,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Revision has been successfully [deployed](${PROJECT_LINK}?revision=${REVISION})`
          })